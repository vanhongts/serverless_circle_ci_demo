# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details

# We are using Lambda with Python 3.6; serverless needs nodejs and python
# so use an undocumented CircleCI container that provides both.

# There is not much to "build" so we should run unit tests.
# If successful, we should deploy with config based on branch name.
# We want to deploy when commits are made to branches with
# branch-specific `.ini` files:
# - develop:   dev.ini
# - release/*: qa.ini
# - master:    prod.ini
# - feature/*: ${CIRCLECI_USERNAME}.ini

version: 2

jobs:
  # Deploy Lambda, S3, DynamoDB needs AWS creds in Project AWS setting:
  # https://circleci.com/gh/v-studios/vmessage-sls/edit#aws
  slsdeploy:
    docker:
      - image: circleci/python:3.6.4-stretch-node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - node_modules-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - node_modules-
      - run:
          name: install npm pacakges
          command: |
            npm install
      - save_cache:
          paths:
            - ./node_modules
          key: node_modules-{{ checksum "package.json" }}
      - run:
          name: sls deploy todo_list
          command: |
            node_modules/.bin/sls deploy --stage dev
  integrationtest:
    docker:
      - image: circleci/python:3.6.4-stretch-node-browsers

    working_directory: ~/repo
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Download Selenium
          command: |
            curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
      - run:
          name: Start Selenium
          command: |
            java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
          background: true
      - restore_cache:
          keys:
          - requirements-{{ checksum "requirements.txt" }}
          - requirements-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: requirements-{{ checksum "requirements.txt" }}

      - restore_cache:
          keys:
          - node_modules-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - node_modules-
      - run:
          name: install npm pacakges
          command: |
            npm install
      - save_cache:
          paths:
            - ./node_modules
          key: node_modules-{{ checksum "package.json" }}

      - run:
          name: run tests
          environment:
            BASH_ENV: ~/.bashrc
          command: |
            . venv/bin/activate
            # Now run the integration tests:
            # We will have to make the "stage" part of the table nams based on the Git branch we're working on, just like we do below for the "sls deploy"
            echo "Doing integration test with BRANCH=${CIRCLE_BRANCH} USERNAME=${CIRCLE_USERNAME}"
            MAIN_URL=$(node_modules/.bin/sls info --verbose | grep ServiceEndpoint: | cut -d ' ' -f2)
            echo "The links for testing: ${MAIN_URL}"
            case "${CIRCLE_BRANCH}" in
              master)
                echo "Testing stage prod"
                #INQUIRY_TABLE=Inquire-prod MESSAGE_TABLE=Message-prod REGION=us-east-1 pytest integration.py --stage=prod --url=${MAIN_URL}/inquiry
              release/*)
                echo "Testing stage qa"
                #INQUIRY_TABLE=Inquire-qa MESSAGE_TABLE=Message-qa REGION=us-east-1 pytest integration.py --stage=qa --url=${MAIN_URL}/inquiry
                ;;
              develop)
                echo "Testing stage dev"
                #INQUIRY_TABLE=Inquire-dev MESSAGE_TABLE=Message-dev REGION=ap-southeast-1 pytest integration.py --stage=dev --url=${MAIN_URL}/inquiry
                ;;
              feature/*)
                echo "Testing stage ${CIRCLE_USERNAME}"
                #INQUIRY_TABLE=Inquire-${CIRCLE_USERNAME} MESSAGE_TABLE=Message-${CIRCLE_USERNAME} REGION=ap-southeast-1 pytest integration.py --stage=${CIRCLE_USERNAME} --url=${MAIN_URL}/inquiry
                ;;
              *)
                echo "ERROR: unrecognized CIRCLE_BRANCH=${CIRCLE_BRANCH}"
                exit 1
                ;;
            esac
workflows:
  version: 2
  pytest_slsdeploy:
    jobs:
      - slsdeploy
      - integrationtest:
          requires:
            - slsdeploy

